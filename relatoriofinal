\documentclass[12pt, a4paper]{article}
\usepackage[brazilian]{babel}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{subfig}
\usepackage{{Imagens/}}
\title{Sprint 01}
\author{Bruno Augusto, Iago Lincon, João Gabriel, Maycow dos Santos}
\date{25/04/2017}

\begin{document}
	
	\begin{titlepage}
		\maketitle
	\end{titlepage}
	
	\begin{abstract}
		Fora designado ao grupo aprender o básico da programação em Python nos seis primeiros capítulos iniciais do livro originalmente nomeado como "Automate the Boring Stuff". Em tais capítulos, é ensinado desde comandos simples como a concatenação proporcionado pelo Python, até a existência de funções, listas, dicionários e suas funcionalidades. Posteriormente, o grupo deveria escolher dois capítulos da parte destinada a programação funcional do livro e aprendê-los para começar a adquirir o conhecimento do que a linguagem proporcionada pelo software trabalhado pode fazer.
	\end{abstract}
	
	
	\begin{titlepage}
		\centering\huge \textbf{Parte I:\newline Adicionando Conhecimento}
	\end{titlepage}
	
	\section{O básico do Python}
		O capítulo introduz as expressões matemáticas que são utilizadas dentro da programação do software, noção das variáveis inteiras, pontos flutuantes e strings, concatenação entre strings e o conhecimento da introdução de valores para variáveis.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem01.jpg}
			\caption{Programa que calcula o tamanho do nome do usuário e diz sua idade no ano seguinte}
		\end{figure}
		
	\section{Controle de Fluxo}
		Agora que o mais básico da programação já fora introduzido, é hora de aprender sobre os booleandos, condições para controle de fluxo de dados ou loops, a função range() e o conhecimento sobre a importação de funções do Python, como o import sys (para o sys.exit()).
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem02.jpg}
			\caption{Baseado em condições, o programa diz se o usuário é Alice ou não}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem04.jpg}
			\caption{O programa vampire v2.0 corrige o erro da condição age > 100 e age > 2000}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem03.jpg}
			\caption{Demonstrando a função sys.exit()}
		\end{figure}
		
	\section{Funções}
		Uma parte muito importante da organização de programas (tanto esteticamente, como funcionalmente) está imposto neste capítulo. A introdução do conceito de funções e seus objetivos.\newline A partir de agora, os programas começam a ficar um pouco mais interessantes e com multifuncionalidades que já foram aprendidas em capítulos anteriores.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem05.jpg}
			\caption{Introdução ao conceito de funções}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem06.jpg}
			\caption{Global Escope introduzido no programa anterior}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem07.jpg}
			\caption{Programa que reúne todos conceitos estudados até o momento}
		\end{figure}
	
	\section{Listas}
		Muitas vezes não queremos trabalhar com uma infinidade de variáveis, atribuindo um único valor para cada. Na verdade, na maioria das vezes, precisamos de uma variável que suporta vários valores. No Python, essa função é apresentada pelas listas e tuplas.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem08.jpg}
			\caption{Programa usado para concatenar os nomes dos bichanos em uma lista}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem09.jpg}
			\caption{Função random para produzir um jogo de aleatoriedade}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem10.jpg}
			\caption{Demonstração da transferência de referência através de variáveis locais em uma função}
		\end{figure}
		
	\section{Estruturando Dados e Dicionários}
		Dicionários são extensões de listas, com algumas vantagens e desvantagens dependendo da necessidade do programador. Em geral, eles se tornam muito úteis, principalmente pelo esquema "chave-valor" que é atribuído a cada dicionário.\newline Além disso, possuem a possibilidade de construção dic.-dic. (um dicionário dentro de outro dicionário), função que pode ser muito útil quando você precisa atribuir valores para duas "chaves" diferentes. Esse processo pode simplificar muito a programação de softwares complexos pela acessibilidade que você pode trabalhar com os seus itens.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem11.jpg}
			\caption{Usando um dicionário, criamos uma função que mostra os aniversários dos amigos. Caso este não esteja na lista, ele irá adicioná-lo no dicionário}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem12.jpg}
			\caption{for usado juntamente com a função pprint para contar caracteres em uma variável de string}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem13.jpg}
			\caption{Aplicando os conhecimentos adquiridos para desenvolver um protótipo de jogo da velha}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem14.jpg}
			\caption{Programa para demonstrar um dicionário dentro de outro dicionário. Nele ele diz a quantidade de cada item que fora levado para o picnic, caso esse não exista, então = 0}
		\end{figure}
		
	\section{Manipulando Strings}
		Esta secção é destinada para o aprofundamento do seu embasamento teórico sobre as funcionalidades do Python. São introduzidas várias funções que trabalham para modelar sua string (e seus processos) da forma qual for mais conveniente para seu projeto.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem15.jpg}
			\caption{Faz uma tabela com todos os itens do picnic utilizando as funções .center(), .ljust(), .rjust()}
		\end{figure}
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem16.jpg}
			\caption{Demonstração da função .isdecimal()}
		\end{figure}
		
		\pagebreak
		
	\begin{titlepage}
		\centering\huge \textbf{Parte II:\newline Primeiras Tarefas}
	\end{titlepage}
		
	\section[Capítulo Escolhido: 07]{Pattern Matching com Expressões Regulares}
		Introduz o conhecimento de uma poderosa ferramenta do Python, a Regular Expressions, ou re (import re). Processos que envolveriam diversas iterações e condições, agora podem ser feitos com uma pequena linha de código como a .search() ou re.compile(r'.....').
		
		\begin{figure}[h]
			\centering
			\subfloat[isPhoneNumber v.01]{
			\includegraphics[width=0.45\paperwidth]{imagem17.jpg}
			}
			\quad\quad
			\subfloat[isPhoneNumber v.02]{
			\includegraphics[width=0.45\paperwidth]{imagem18.jpg}
			}
			\caption{Implementação da função que verifica números telefônicos com uma iteração que capta os números automaticamente}
		\end{figure}
	
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem19.jpg}
			\caption{As duas versões dos programas anteriores simplificadas agora com a extensão re}
		\end{figure}
		
	\section[Capítulo Escolhido: 08]{Lendo e Escrevendo Arquivos}
		 Neste capítulo o foco principal é aprender a interagir com o seu software de sistema operacional. Com este conteúdo, ficará fácil manipular arquivos desejados no seu OS através de algumas linhas de código do seu Python.
		
		\begin{figure}
			\centering
			\includegraphics[width=0.7\paperwidth]{imagem20.jpg}
			\caption{Com todo o conhecimento dos caps. anteriores, o programa recebe substantivos, adverbios ou verbos e junta os elementos digitados pelo usuario formando uma frase ou um texto qual o usuário deseja}
		\end{figure}
		

\end{document}
